{
  "version": 3,
  "sources": [
    "D:/Projects/decorum-ng/node_modules/browser-pack/_prelude.js",
    "D:\\Projects\\decorum-ng\\src\\src\\constants.ts",
    "D:\\Projects\\decorum-ng\\src\\src\\validate-directive.ts",
    "D:\\Projects\\decorum-ng\\src\\src\\validation-config.ts",
    "D:\\Projects\\decorum-ng\\src\\src\\validation-element-directive.ts",
    "D:\\Projects\\decorum-ng\\src\\src\\validator-directive.ts",
    "src/main.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "export const ModuleName = 'decorum';\r\nexport const ValidatorDirectiveKey = 'decValidator';\r\nexport const ValidateDirectiveKey = 'decValidate';\r\nexport const ValidationElementDirectiveKey = 'decValidationElement';\r\nexport const ValidationConfigService = 'decorumConfig';",
    "import * as Constants from './constants';\r\nimport {ValidationConfigService} from './validation-config';\r\n\r\n\r\nexport class ValidateDirectiveController {\r\n    constructor() {\r\n    }\r\n\r\n    getMessage(type: string) {\r\n    }\r\n}\r\n\r\nexport function validateDirective($compile: ng.ICompileService, decorumConfig: ValidationConfigService): ng.IDirective {\r\n    return <ng.IDirective>{\r\n        restrict: 'A',\r\n        scope: {},\r\n        controller: ValidateDirectiveController,\r\n        controllerAs: 'ctrl',\r\n        require: ['ngModel', `^${Constants.ValidatorDirectiveKey}`, `?^${Constants.ValidationElementDirectiveKey}`, Constants.ValidateDirectiveKey],\r\n        link($scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ctrls: any[]) {\r\n            let modelCtrl: ng.INgModelController = ctrls[0],\r\n                validatorCtrl = ctrls[1],\r\n                validationElementCtrl = ctrls[2],\r\n                ctrl: ValidateDirectiveController = ctrls[3],\r\n                fieldKey = attrs[Constants.ValidateDirectiveKey] || modelCtrl.$name,\r\n                $validationElement = angular.element(decorumConfig.errorsTemplate);\r\n\r\n            // Setup scope functions used in template\r\n            $scope['msgFuncs'] = {};\r\n            $scope['$error'] = modelCtrl.$error;\r\n            $scope['errorTypes'] = [];\r\n            $scope['model'] = modelCtrl;\r\n\r\n            $compile($validationElement)($scope);\r\n            element.siblings().last().after($validationElement);\r\n\r\n            $scope.$watch(\r\n                () => validatorCtrl.validator,\r\n                validator => {\r\n                    if (!validator) {\r\n                        return;\r\n                    }\r\n\r\n                    var fieldOptions = validator.getValidationOptions(fieldKey);\r\n                    if (!fieldOptions) {\r\n                        return;\r\n                    }\r\n\r\n                    let validators = fieldOptions.getValidators(),\r\n                        fieldName = fieldOptions.getFieldName();\r\n                    validators.forEach(validationObj => {\r\n                        let key = validationObj.getKey();\r\n                        modelCtrl.$validators[key] = (modelValue: any,  viewValue: any) => validationObj.isValid(viewValue, validator.model);\r\n                        if (!validationObj.allowPristine()) {\r\n                            modelCtrl.$setValidity(key,  false);\r\n                        }\r\n                        $scope['msgFuncs'][key] = () => validationObj.getCustomMessage() || validationObj.getMessage(fieldName, modelCtrl.$viewValue);\r\n                        $scope['errorTypes'].push(key);\r\n                    });\r\n                });\r\n\r\n            if (validationElementCtrl) {\r\n                $scope.$watch(() => modelCtrl.$pristine, val => validationElementCtrl.pristine = val);\r\n                $scope.$watch(() => modelCtrl.$valid, val => validationElementCtrl.valid = val);\r\n                $scope.$watch(() => modelCtrl.$invalid, val => validationElementCtrl.invalid = val);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nangular.module(Constants.ModuleName).directive(Constants.ValidateDirectiveKey, validateDirective);",
    "import * as Constants from './constants';\r\n\r\nlet errorsTemplate = `\r\n    <span class=\"help-block\" ng-repeat=\"type in errorTypes\" ng-show=\"msgFuncs[type] && $error[type]\">\r\n        {{msgFuncs[type]()}}\r\n    </span>\r\n`;\r\n\r\nexport class ValidationConfigService {\r\n    errorsTemplate = errorsTemplate;\r\n\r\n    constructor() {\r\n    }\r\n}\r\n\r\nangular.module(Constants.ModuleName)\r\n    .service(Constants.ValidationConfigService, () => new ValidationConfigService());",
    "import * as Constants from './constants';\r\n\r\nexport function validationElementDirective(): ng.IDirective {\r\n    return <ng.IDirective>{\r\n        restrict: 'A',\r\n        scope: {\r\n            errorCss: '@onErrorCss',\r\n            validCss: '@onValidCss',\r\n        },\r\n        controller() {\r\n            this.valid = false;\r\n            this.invalid = false;\r\n            this.pristine = true;\r\n        },\r\n        link($scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ctrl: any) {\r\n            var errorCss = $scope['errorCss'],\r\n                validCss = $scope['validCss'];\r\n\r\n            if (errorCss) {\r\n                $scope.$watch(\r\n                    () => !ctrl.pristine && ctrl.invalid,\r\n                    val => element.toggleClass(errorCss, val));\r\n            }\r\n\r\n            if (validCss) {\r\n                $scope.$watch(\r\n                    () => !ctrl.pristine && ctrl.valid,\r\n                    val => element.toggleClass(validCss, val));\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n\r\nangular.module(Constants.ModuleName).directive(Constants.ValidationElementDirectiveKey, validationElementDirective);\r\n",
    "import * as Constants from './constants';\r\n\r\nexport function validatorDirective(): ng.IDirective {\r\n    return <ng.IDirective>{\r\n        restrict: 'A',\r\n        controller() {\r\n            this.validator = null;\r\n        },\r\n        link($scope: ng.IScope, element: ng.IAugmentedJQuery, attrs: ng.IAttributes, ctrl: any) {\r\n            let attrValue = attrs[Constants.ValidatorDirectiveKey];\r\n\r\n            $scope.$watch(attrValue, (value: Object) => {\r\n                ctrl.validator = value;\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nangular.module(Constants.ModuleName).directive(Constants.ValidatorDirectiveKey, validatorDirective);",
    "/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nimport * as Constants from './constants';\r\nangular.module(Constants.ModuleName, []);\r\n\r\nexport {validateDirective, ValidateDirectiveController} from './validate-directive';\r\nexport {ValidationConfigService} from './validation-config';\r\nexport {validationElementDirective} from './validation-element-directive';\r\nexport {validatorDirective} from './validator-directive';\r\n\r\n"
  ]
}